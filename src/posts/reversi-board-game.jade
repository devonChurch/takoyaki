extends ../partials/post.jade

block pageData
    -
        page = {
            template: 'post',
            heading: 'Reversi board game',
            type: 'Experiment',
            date: generateDate({
                year: 2015,
                month: 12,
                day: 20
            }),
            images: {
                type: '3upEqual',
                data: [
                    {src: 'reversi-board-game-start', extension: 'png', alt: 'The initial board layout for a game of Reversi. Starting player is randomly picked each game. The dark gray tiles illustrates possible moves the the player can make this turn'},
                    {src: 'reversi-board-game-end', extension: 'png', alt: 'The end sequence of a game that decides the winner based on total board coverage'},
                    {src: 'reversi-board-game-reset', extension: 'png', alt: 'The reset sequence of a game where the tiles are all flipped over to generate a fresh board layout'}
                ]
            },
            technology: [
                'Webpack',
                'ES6 (Transpired using Babel)',
                'SVG',
                'SASS'
            ],
            more: [
                { heading: 'Code Pen', link: 'http://codepen.io/DevonChurch/full/XXNqWE/', local: false},
                { heading: 'Git Hub', link: 'https://github.com/devonChurch/salmon-nigiri', local: false}
            ]
        } //- page ]

block content
    :markdown
        Inspired by [this article](https://cssanimation.rocks/twitter-fave/) and by playing [Reversi](https://en.wikipedia.org/wiki/Reversi) as a child - I set out to build my own rendition of the game using web technologies.
        
        Building the tile flip animation as an embedded SVG sprite allowed me gain the “stepped” CSS animation. Leveraging this technique gave the added benefit of swapping out the tile colors on the fly using Javascript on a per tile basis. This resulted in a single sequence to handle all required animation scenarios.

        Creating the game with a responsive layout methodology was important. Using a percentage based format allowed me to cater to a maximum amount of device sizes with a minimum amount of code.

        I used CommonJS modules in conjunction with an ES6 class based syntax to segregate the functionality into manageable chunks i.e. AI vs human sequences.
