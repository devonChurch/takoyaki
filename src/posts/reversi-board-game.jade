extends ../partials/post.jade

block pageData
    -
        page = {
            template: 'post',
            heading: 'Reversi board game',
            type: 'Experiment',
            date: generateDate({
                year: 2015,
                month: 12,
                day: 20
            }),
            images: {
                type: '3upEqual',
                data: [
                    {src: 'reversi-board-game-start', extension: 'png', alt: 'An initial board layout for a game of Reversi. Starting player is randomly picked each game. The dark gray tiles illustrate moves the the player can make this turn'},
                    {src: 'reversi-board-game-end', extension: 'png', alt: 'The end sequence of a game that decides the winner based on total board coverage'},
                    {src: 'reversi-board-game-reset', extension: 'png', alt: 'The reset sequence of a game where the tiles are all flipped to generate a fresh game'}
                ]
            },
            technology: [
                'Webpack',
                'ES6 (Transpired using Babel)',
                'SVG',
                'SASS'
            ],
            more: [
                { heading: 'Code Pen', link: 'http://codepen.io/DevonChurch/full/XXNqWE/', local: false},
                { heading: 'Git Hub', link: 'https://github.com/devonChurch/salmon-nigiri', local: false}
            ]
        } //- page ]

block content
    :markdown
        Inspired by [this article](https://cssanimation.rocks/twitter-fave/) and a childhood playing [Reversi](https://en.wikipedia.org/wiki/Reversi) - I set out to build my own rendition of the same using web technologies.
        
        Building the tile flip animation as an embedded SVG sprite allowed me gain the “stepped” CSS animation with the added benefit of swapping out the tile colors on the fly using Javascript to augment a class based system on a per tile basis. This resulted in a single sequence to handle all require animation scenarios required of it.

        Creating the game with a responsive layout methodology was important. Using a percentage based format allowed me cater to a maximum amount of devices with a minimum amount of code.

        I used CommonJS modules on conjunction with a ES6 Class based syntax to segregate the various functionality into manageable chunks i.e. AI vs human turn sequences.
